//자료구조 2차 코딩테스트 대비 이진트리 만들기
//사용자로부터 n입력받은후 1부터 n까지의 자연수들을 이진포화트리로 구현하는 프로그램
#include <stdio.h>
#include <stdlib.h>

typedef struct Node{
	int key;
	struct Node* llink;
	struct Node* rlink;
}Node;

#define MAX 30
Node* Queue[MAX];
int rear = -1;
int front = -1;

Node* deQueue()
{
	front = (front+1)%MAX;
	return Queue[front];
}

void enQueue(Node* ptr)
{
	rear = (rear+1)%MAX;
	Queue[rear] = ptr;
}

void order(Node* ptr)
{
	if(ptr)
	{
		order(ptr->llink);
		printf("%d ",ptr->key);
		order(ptr->rlink);
	}
}

void freeNode(Node* ptr)
{
	freeNode(ptr->llink);
	freeNode(ptr->rlink);
	free(ptr);
}

int main(void)
{
	Node* headNode = (Node*)malloc(sizeof(Node));
	headNode->key = -9999;
	headNode->rlink = NULL;
	headNode->llink = NULL;

	int n;
	scanf("%d",&n);

	for(int i=0;i<n;i++)
	{
		Node* newNode = (Node*)malloc(sizeof(Node));
		newNode->key = i+1;
		newNode->llink = NULL;
		newNode->rlink = NULL;

		Node* temp = headNode->llink;

		if(temp==NULL)
		{
			headNode->llink = newNode;
			temp = newNode;
		}
		else
		{
			if(temp->llink == NULL)
			{
				temp->llink = newNode;
				enQueue(newNode);
			}

			else if((temp->llink!=NULL)&&(temp->rlink==NULL))
			{
				temp->rlink = newNode;
				enQueue(newNode);
			}

			else
			{
				temp = deQueue();
				temp->llink = newNode;
				enQueue(newNode);
			}
		}
	}

	order(headNode->llink);

	freeNode(headNode->llink);
	free(headNode);

	return 0;
}
