//단절점 찾기 코드
//DFS
//인접리스트 방식

#include <stdio.h>
#include <stdlib.h>
//<stdio.h>와 <stdlib.h>를 컴파일전에 전처리기에 포함하도록 지시

#define MAX 100
//MAX를 상수 100으로 선언

//GraphNode 구조체 선언
typedef struct GraphNode{
    int vertex;
    struct GraphNode* link;
}GraphNode;

//GraphType 구조체 선언
typedef struct  GraphType{
    int n;
    GraphNode* adj_list[MAX];
}GraphType;

//prenum 값을 저장할 전역 배열 선언
int pre[MAX]= {0,};

//방문한 노드들을 저장할 전역 배열 선언
int Visited[MAX]= {0,};

//해당 노드의 부모노드를 저장할 전역 배열 선언
int parent[MAX]= {0,};

//low 값을 저장할 전역 배열 선언
int low[MAX]= {0,};

//Articulation points 를 저장할 전역 배열 선언
int ap[MAX] = {0,};

int count = 0;

//최소값을 리턴하는 함수
int minval(int a,int b)
{
    if(a>b)
    {
        return b;
    }

    return a;
}

//그래프 g를 만드는 함수
void init(GraphType *g)
{
    int v;
    g->n=0;
    for(v=0;v<MAX;v++)
    {
        g->adj_list[v]=NULL;
    }
}

//vertex를 삽입하는 함수
void insert_vertex(GraphType* g, int v)
{
    if(((g->n)+1)>MAX)
    {
        return;
    }

    g->n++;
}

//edge를 삽입하는 함수
void insert_edge(GraphType* g,int u,int v)
{
    GraphNode* node;
    if(u>=g->n||v>=g->n)
    {
        return;
    }
    node = (GraphNode*)malloc(sizeof(GraphNode));
    node->vertex=v;
    node->link = g->adj_list[u];
    g->adj_list[u] = node;
}

//articulation points를 찾는 함수
void SearchAP(struct GraphType * g,int v)
{
    //이중 방문을 피하기 위해 값에 1 저장
    Visited[v]=1;

    //GraphNode 포인터 타입 temp 선언
    struct GraphNode* temp=NULL;
    temp = g->adj_list[v];

    int childNum=0;

    count++;
    pre[v]=low[v]=count;

    while(temp!=NULL)
    {       
       if(!Visited[temp->vertex])
        {
            childNum++;
            parent[temp->vertex]=v;
            SearchAP(g,temp->vertex);

            low[v]= minval(low[v],low[temp->vertex]);

            if( childNum>1&&parent[v]==-1)
            {
                ap[v]=1;
            }

            if(pre[v]<=low[temp->vertex] && parent[v]!=-1)
            {
                ap[v]=1;    
            }       
        }    

        else if(temp->vertex!=parent[v])
        {
            low[v]=minval(low[v],pre[temp->vertex]);
        }

       temp= temp->link;
      }
}

//AP를 출력하는 함수
void getAP(struct GraphType* g)
{
    for(int i=0;i<g->n;i++)
    {
        Visited[i]=0;
        parent[i]=-1;
        ap[i]=0;
    }

    for(int j=0;j<g->n;j++)
    {
        if(Visited[j]==0)
        {
            SearchAP(g,j);
        }
    }

    int check=0;

    printf("Articulation points : ");
    for(int k=0;k<g->n;k++)
    {
        if(ap[k]==1)
        {
            check=1;
            printf(" %d ",k+1);
        }
    }
    printf("\n");

    if(check==0)
    {
        return;
    }
}

int main(void)
{
    GraphType *g;
    g = (GraphType*)malloc(sizeof(GraphType));
    init(g);

    FILE *fp;
    fp = fopen("AP.txt","r");

    int v1,v2;

    int i;

    for(i=0;i<100;i++)
    {
        insert_vertex(g,i);
    }

    while(feof(fp)==0)
    {
        fscanf(fp,"(%d,%d)$",&v1,&v2);
        insert_edge(g,v1-1,v2-1);
    }

    getAP(g);

    free(g);
    fclose(fp);

    return 0;
}
