#include <stdio.h>
#include <string.h>
#define MAX_SIZE 101

typedef struct Stack
{
	char stack[MAX_SIZE];
	int top;
}Stack;

void push(Stack *a,char s)
{
	a->stack[(a->top)++] = s;
}

char pop(Stack *a)
{
	return a->stack[--(a->top)]; 
}

int empty(Stack *a)
{
	if(a->top == 0)
	{
		return 1;
	}
	
	else
	{
		return 0;
	}
}

int isOperator(char a)
{
	if(a=='(')
	{
		return 0;
	}
	
	else if((a=='+')||(a=='-'))
	{
		return 1;
	}
	
	else if((a=='*')||(a=='/'))
	{
		return 2;
	}
	
	else if( a == ')' )
	{
		return 3;
	}
	
	else if((a>64)&&(a<91))
	{
		return -1;
	}
	
	else 
	{
		return -99;
	}
}

void postfix(char *str,int a)
{
	Stack stk;
	stk.top = 0;
	
	for(int i=0;i<a;i++)
	{
		if(isOperator(str[i])==0)
		{
			push(&stk,str[i]);
		}
		
		else if(isOperator(str[i])==-1)
		{
			printf("%c",str[i]);
		}
		
		else if(isOperator(str[i])==1)
		{
			if(empty(&stk))	//비어있을때
			{
				push(&stk,str[i]);
			}
			
			else
			{
				while((isOperator(stk.stack[(stk.top)-1])>=1))
				{
					printf("%c",pop(&stk));
				}
				
				push(&stk,str[i]);
			}
		}
		
		else if(isOperator(str[i])==2)
		{
			if(empty(&stk))	//비어있을때
			{
				push(&stk,str[i]);
			}
			
			else
			{
				while((isOperator(stk.stack[(stk.top)-1])>=2))
				{
					printf("%c",pop(&stk));
				}
				
				push(&stk,str[i]);
			}
		}
		
		else if(isOperator(str[i])==3)
		{
			while(stk.stack[stk.top-1] != '(')	// ( 나오기 전까지 출력하고 pop
			{
				printf("%c",pop(&stk));
			}
			
			pop(&stk);
		}
		
		else
		{
			break;
		}
	}
	
	while(!empty(&stk))
	{
		printf("%c",pop(&stk));
	}
}

int main(void)
{
	char str[MAX_SIZE];
	scanf("%s",str);
	int lenStr = strlen(str);
	postfix(str,lenStr);
	
	return 0;
}
